// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Syac.Orders.Core.Infraestructure.Persistence.Context;

#nullable disable

namespace Syac.Orders.Core.Infraestructure.Persistence.Migrations
{
    [DbContext(typeof(SyacOrdersDbContext))]
    [Migration("20251024153643_Seed-Customers")]
    partial class SeedCustomers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasDefaultValueSql("NEWSEQUENTIALID()")
                        .HasComment("Id del registro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasComment("Correo del usuario");

                    b.Property<long>("IdentityNumber")
                        .HasColumnType("bigint")
                        .HasComment("Numero de identificación del usuario");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indica si el registro ha sido eliminado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nombre del cliente");

                    b.HasKey("Id");

                    b.ToTable("Customers", "Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b29c4c7f-ea5d-431f-bca6-e650742cfb9f"),
                            Email = "customer@syac.com",
                            IdentityNumber = 12345678L,
                            IsDeleted = false,
                            Name = "Syac"
                        },
                        new
                        {
                            Id = new Guid("1b4e28ba-2fa1-11d2-883f-0016d3cca427"),
                            Email = "rgcascante@outlook.com",
                            IdentityNumber = 1005714857L,
                            IsDeleted = false,
                            Name = "Rafael Cascante"
                        },
                        new
                        {
                            Id = new Guid("3fedd6a9-4fc4-4d65-9e73-7ab16e55f2b9"),
                            Email = "sara@gmail.com",
                            IdentityNumber = 12345678L,
                            IsDeleted = false,
                            Name = "Sara Giraldo"
                        });
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasDefaultValueSql("NEWSEQUENTIALID()")
                        .HasComment("Id del registro");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Indica la fecha y hora en que se creo el pedido");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasComment("Id del cliente");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indica si el registro ha sido eliminado");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasComment("Indica el estado del pedido, siendo null para en proceso, false para cancelado y true confirmado");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders", "Orders");
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Id del registro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasComment("Cantidad solicitada del producto");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indica si el registro ha sido eliminado");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasComment("Id de la orden");

                    b.Property<short>("ProductId")
                        .HasColumnType("smallint")
                        .HasComment("Id del producto relacionado");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique();

                    b.ToTable("OrderProducts", "Orders");
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Product", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasComment("Id del registro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indica si el registro ha sido eliminado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nombre del producto");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Precio del producto");

                    b.HasKey("Id");

                    b.ToTable("Products", "Stock");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            IsDeleted = false,
                            Name = "Teclado mecánico",
                            Price = 400m
                        },
                        new
                        {
                            Id = (short)2,
                            IsDeleted = false,
                            Name = "Mouse ergonómico",
                            Price = 150m
                        },
                        new
                        {
                            Id = (short)3,
                            IsDeleted = false,
                            Name = "Pantalla 27 pulgadas",
                            Price = 1200m
                        },
                        new
                        {
                            Id = (short)4,
                            IsDeleted = false,
                            Name = "Cable HDMI",
                            Price = 20m
                        },
                        new
                        {
                            Id = (short)5,
                            IsDeleted = false,
                            Name = "Silla gamer",
                            Price = 600m
                        });
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Order", b =>
                {
                    b.HasOne("Syac.Orders.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Syac.Orders.Core.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Syac.Orders.Core.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Syac.Orders.Core.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
